//
// parse_test.go
//
// Copyright (c) 2019 Markku Rossi
//
// All rights reserved.
//

package dns

import (
	"testing"

	"github.com/markkurossi/vpn/ip"
)

var testPackets = [][]byte{
	// Query
	// +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
	// |QR|   Opcode  |AA|TC|RD|RA|   Z    |   RCODE   |
	// +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
	//  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
	[]byte{
		0x45, 0x00, 0x00, 0x3d, 0x0a, 0x5f, 0x00, 0x00,
		0x40, 0x11, 0x73, 0xa0, 0xc0, 0xa8, 0x2b, 0xf9,
		0x08, 0x08, 0x08, 0x08, 0xf2, 0x71, 0x00, 0x35,
		0x00, 0x29, 0x40, 0x79, 0x29, 0x5f, 0x01, 0x00,
		0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x6b, 0x75, 0x72,
		0x6f, 0x73, 0x73, 0x69, 0x03, 0x63, 0x6f, 0x6d,
		0x00, 0x00, 0x01, 0x00, 0x01,
	},
	// Response
	// +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
	// |QR|   Opcode  |AA|TC|RD|RA|   Z    |   RCODE   |
	// +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
	//  1  0  0  0  0  0  0  1  1  0  0  0  0  0  0  0
	[]byte{
		0x45, 0x58, 0x00, 0x4d, 0x2c, 0x5b, 0x00, 0x00,
		0x74, 0x11, 0x1d, 0x3c, 0x08, 0x08, 0x08, 0x08,
		0xc0, 0xa8, 0x2b, 0xf9, 0x00, 0x35, 0xf2, 0x71,
		0x00, 0x39, 0xcf, 0x6b, 0x29, 0x5f, 0x81, 0x80,
		0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
		0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x6b, 0x75, 0x72,
		0x6f, 0x73, 0x73, 0x69, 0x03, 0x63, 0x6f, 0x6d,
		0x00, 0x00, 0x01, 0x00, 0x01, 0xc0, 0x0c, 0x00,
		0x01, 0x00, 0x01, 0x00, 0x00, 0x38, 0x3f, 0x00,
		0x04, 0xd0, 0x71, 0xa3, 0x2c,
	},
	[]byte{
		0x45, 0x00, 0x00, 0xa3, 0x75, 0xce, 0x40, 0x00,
		0x40, 0x11, 0xec, 0x26, 0xc0, 0xa8, 0x2b, 0x0b,
		0xc0, 0xa8, 0x2b, 0xf9, 0x00, 0x35, 0xf3, 0x2e,
		0x00, 0x8f, 0xea, 0x0d, 0x51, 0xdd, 0x81, 0x80,
		0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
		0x06, 0x67, 0x73, 0x2d, 0x6c, 0x6f, 0x63, 0x05,
		0x61, 0x70, 0x70, 0x6c, 0x65, 0x03, 0x63, 0x6f,
		0x6d, 0x00, 0x00, 0x01, 0x00, 0x01, 0xc0, 0x0c,
		0x00, 0x05, 0x00, 0x01, 0x00, 0x00, 0x0a, 0x52,
		0x00, 0x24, 0x0a, 0x67, 0x73, 0x2d, 0x6c, 0x6f,
		0x63, 0x2d, 0x6e, 0x65, 0x77, 0x08, 0x6c, 0x73,
		0x2d, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x03, 0x63,
		0x6f, 0x6d, 0x06, 0x61, 0x6b, 0x61, 0x64, 0x6e,
		0x73, 0x03, 0x6e, 0x65, 0x74, 0x00, 0xc0, 0x2e,
		0x00, 0x05, 0x00, 0x01, 0x00, 0x00, 0x00, 0x68,
		0x00, 0x09, 0x06, 0x67, 0x73, 0x2d, 0x6c, 0x6f,
		0x63, 0xc0, 0x39, 0xc0, 0x5e, 0x00, 0x01, 0x00,
		0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x04, 0x11,
		0x86, 0x7f, 0xf9, 0xc0, 0x5e, 0x00, 0x01, 0x00,
		0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x04, 0x11,
		0x86, 0x7f, 0xfa,
	},
	[]byte{
		0x45, 0x00, 0x00, 0x8e, 0x77, 0x3f, 0x40, 0x00,
		0x40, 0x11, 0xea, 0xca, 0xc0, 0xa8, 0x2b, 0x0b,
		0xc0, 0xa8, 0x2b, 0xf9, 0x00, 0x35, 0xca, 0x44,
		0x00, 0x7a, 0x77, 0xb8, 0x83, 0x02, 0x81, 0x83,
		0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
		0x02, 0x6c, 0x62, 0x07, 0x5f, 0x64, 0x6e, 0x73,
		0x2d, 0x73, 0x64, 0x04, 0x5f, 0x75, 0x64, 0x70,
		0x01, 0x30, 0x02, 0x34, 0x33, 0x03, 0x31, 0x36,
		0x38, 0x03, 0x31, 0x39, 0x32, 0x07, 0x69, 0x6e,
		0x2d, 0x61, 0x64, 0x64, 0x72, 0x04, 0x61, 0x72,
		0x70, 0x61, 0x00, 0x00, 0x0c, 0x00, 0x01, 0x03,
		0x31, 0x36, 0x38, 0x03, 0x31, 0x39, 0x32, 0x07,
		0x49, 0x4e, 0x2d, 0x41, 0x44, 0x44, 0x52, 0x04,
		0x41, 0x52, 0x50, 0x41, 0x00, 0x00, 0x06, 0x00,
		0x01, 0x00, 0x00, 0x01, 0x2c, 0x00, 0x17, 0xc0,
		0x3b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x70, 0x80, 0x00, 0x00, 0x1c, 0x20, 0x00, 0x09,
		0x3a, 0x80, 0x00, 0x01, 0x51, 0x80,
	},
	[]byte{
		0x45, 0x00, 0x00, 0x90, 0x50, 0x69, 0x00, 0x00,
		0x7b, 0x11, 0x89, 0x1a, 0x08, 0x08, 0x08, 0x08,
		0x0a, 0x31, 0x4b, 0x99, 0x00, 0x35, 0xcf, 0x49,
		0x00, 0x7c, 0x51, 0x29, 0x75, 0xe1, 0x81, 0x83,
		0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
		0x15, 0x78, 0x78, 0x78, 0x78, 0x6a, 0x6b, 0x6a,
		0x73, 0x6b, 0x64, 0x66, 0x6a, 0x6b, 0x73, 0x6a,
		0x66, 0x6b, 0x73, 0x6a, 0x78, 0x78, 0x03, 0x63,
		0x6f, 0x6d, 0x00, 0x00, 0x01, 0x00, 0x01, 0xc0,
		0x22, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00, 0x03,
		0x83, 0x00, 0x3d, 0x01, 0x61, 0x0c, 0x67, 0x74,
		0x6c, 0x64, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65,
		0x72, 0x73, 0x03, 0x6e, 0x65, 0x74, 0x00, 0x05,
		0x6e, 0x73, 0x74, 0x6c, 0x64, 0x0c, 0x76, 0x65,
		0x72, 0x69, 0x73, 0x69, 0x67, 0x6e, 0x2d, 0x67,
		0x72, 0x73, 0xc0, 0x22, 0x5d, 0x54, 0x30, 0xb6,
		0x00, 0x00, 0x07, 0x08, 0x00, 0x00, 0x03, 0x84,
		0x00, 0x09, 0x3a, 0x80, 0x00, 0x01, 0x51, 0x80,
	},

	// DNS Server
	[]byte{
		0x45, 0x00, 0x00, 0x40, 0x0b, 0x08, 0x00, 0x00,
		0x40, 0x11, 0x27, 0x9c, 0xc0, 0xa8, 0x63, 0xb7,
		0xc0, 0xa8, 0x63, 0x01, 0xf7, 0x21, 0x00, 0x35,
		0x00, 0x2c, 0x48, 0x17, 0xa6, 0x16, 0x01, 0x00,
		0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x02, 0x61, 0x64, 0x0b, 0x6d, 0x61, 0x72, 0x6b,
		0x6b, 0x75, 0x72, 0x6f, 0x73, 0x73, 0x69, 0x03,
		0x63, 0x6f, 0x6d, 0x00, 0x00, 0x01, 0x00, 0x01,
	},

	[]byte{
		0x45, 0x00, 0x00, 0x4b, 0x67, 0x54, 0x40, 0x00,
		0x40, 0x11, 0x8b, 0x44, 0xc0, 0xa8, 0x63, 0x01,
		0xc0, 0xa8, 0x63, 0xb7, 0x00, 0x35, 0xf7, 0x21,
		0x00, 0x37, 0x9d, 0xec, 0xa6, 0x16, 0x81, 0x83,
		0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
		0x02, 0x61, 0x64, 0x0b, 0x6d, 0x61, 0x72, 0x6b,
		0x6b, 0x75, 0x72, 0x6f, 0x73, 0x73, 0x69, 0x03,
		0x63, 0x6f, 0x6d, 0x00, 0x00, 0x01, 0x00, 0x01,
		0x00, 0x00, 0x29, 0x10, 0x00, 0x00, 0x00, 0x80,
		0x00, 0x00, 0x00,
	},

	// Query
	[]byte{
		0x45, 0x00, 0x00, 0x40, 0x86, 0x1c, 0x00, 0x00,
		0x40, 0x11, 0xf2, 0x3f, 0xc0, 0xa8, 0xc0, 0x01,
		0xc0, 0xa8, 0xc0, 0xfe, 0xd3, 0x4b, 0x00, 0x35,
		0x00, 0x2c, 0xb4, 0xb7, 0xa3, 0x04, 0x01, 0x00,
		0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x02, 0x61, 0x64, 0x0b, 0x6d, 0x61, 0x72, 0x6b,
		0x6b, 0x75, 0x72, 0x6f, 0x73, 0x73, 0x69, 0x03,
		0x63, 0x6f, 0x6d, 0x00, 0x00, 0x01, 0x00, 0x01,
	},
	[]byte{
		0x45, 0x00, 0x00, 0x40, 0xc5, 0x6d, 0x00, 0x00,
		0x40, 0x11, 0xb2, 0xee, 0xc0, 0xa8, 0xc0, 0xfe,
		0xc0, 0xa8, 0xc0, 0x01, 0x00, 0x35, 0xc7, 0xfe,
		0x00, 0x2c, 0xdb, 0x02, 0x04, 0x03, 0x85, 0x03,
		0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x02, 0x61, 0x64, 0x0b, 0x6d, 0x61, 0x72, 0x6b,
		0x6b, 0x75, 0x72, 0x6f, 0x73, 0x73, 0x69, 0x03,
		0x63, 0x6f, 0x6d, 0x00, 0x00, 0x01, 0x00, 0x01,
	},
}

func parseDNS(t *testing.T, data []byte) *DNS {
	dns, err := Parse(data)
	if err != nil {
		t.Errorf("Failed to parse packet: %v", err)
		return nil
	}
	ndata, err := dns.Marshal()
	if err != nil {
		t.Errorf("Failed to encode parsed packet: %v", err)
		return nil
	}
	_, err = Parse(ndata)
	if err != nil {
		t.Errorf("Failed to parse encoded packet: %v", err)
		return nil
	}
	return dns
}

func TestParse(t *testing.T) {
	for _, data := range testPackets {
		packet, err := ip.Parse(data)
		if err != nil {
			t.Errorf("Failed to parse IP packet: %v", err)
			continue
		}
		udp, err := ip.ParseUDP(packet)
		if err != nil {
			t.Errorf("Failed to parse UDP: %v", err)
			continue
		}

		dns := parseDNS(t, udp.Data)
		if false && dns != nil {
			dns.Dump()
		}
	}
}

var testDNSMsgs = [][]byte{
	// DNS Queries over HTTPS (DoH)
	[]byte{
		0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x03, 0x77, 0x77, 0x77,
		0x07, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
		0x03, 0x63, 0x6f, 0x6d, 0x00, 0x00, 0x01, 0x00,
		0x01,
	},
	[]byte{
		0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x01, 0x61, 0x3e, 0x36,
		0x32, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
		0x65, 0x72, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2d,
		0x6d, 0x61, 0x6b, 0x65, 0x73, 0x2d, 0x62, 0x61,
		0x73, 0x65, 0x36, 0x34, 0x75, 0x72, 0x6c, 0x2d,
		0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74,
		0x2d, 0x66, 0x72, 0x6f, 0x6d, 0x2d, 0x73, 0x74,
		0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x2d, 0x62,
		0x61, 0x73, 0x65, 0x36, 0x34, 0x07, 0x65, 0x78,
		0x61, 0x6d, 0x70, 0x6c, 0x65, 0x03, 0x63, 0x6f,
		0x6d, 0x00, 0x00, 0x01, 0x00, 0x01,
	},
	[]byte{
		0x00, 0x00, 0x81, 0x80, 0x00, 0x01, 0x00, 0x01,
		0x00, 0x00, 0x00, 0x00, 0x03, 0x77, 0x77, 0x77,
		0x07, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
		0x03, 0x63, 0x6f, 0x6d, 0x00, 0x00, 0x1c, 0x00,
		0x01, 0xc0, 0x0c, 0x00, 0x1c, 0x00, 0x01, 0x00,
		0x00, 0x0e, 0x7d, 0x00, 0x10, 0x20, 0x01, 0x0d,
		0xb8, 0xab, 0xcd, 0x00, 0x12, 0x00, 0x01, 0x00,
		0x02, 0x00, 0x03, 0x00, 0x04,
	},
	// EDNS(0) Padding Option.
	[]byte{
		0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x01, 0x03, 0x77, 0x77, 0x77,
		0x07, 0x65, 0x78, 0x61, 0x6D, 0x70, 0x6C, 0x65,
		0x03, 0x63, 0x6F, 0x6D, 0x00, 0x00, 0x02, 0x00,
		0x01, 0x00, 0x00, 0x29, 0x10, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x10, 0x00, 0x08, 0x00, 0x04,
		0x00, 0x01, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x04,
		0x00, 0x00, 0x00, 0x00,
	},
}

func TestParseDNS(t *testing.T) {
	for _, data := range testDNSMsgs {
		dns := parseDNS(t, data)
		if dns != nil {
			dns.Dump()
		}
	}
}
